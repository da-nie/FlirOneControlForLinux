//****************************************************************************************************
//подключаемые библиотеки
//****************************************************************************************************
#include "cdecorator_scale.h"
#include <math.h>

//****************************************************************************************************
//глобальные переменные
//****************************************************************************************************

//****************************************************************************************************
//константы
//****************************************************************************************************

//****************************************************************************************************
//макроопределения
//****************************************************************************************************

//****************************************************************************************************
//конструктор и деструктор
//****************************************************************************************************

//----------------------------------------------------------------------------------------------------
//конструктор
//----------------------------------------------------------------------------------------------------
CDecorator_Scale::CDecorator_Scale(IImage *iImage_Set_Ptr,uint32_t new_width,uint32_t new_height):CDecorator_IImage(iImage_Set_Ptr)
{
 Width=new_width;
 Height=new_height;
}
//----------------------------------------------------------------------------------------------------
//деструктор
//----------------------------------------------------------------------------------------------------
CDecorator_Scale::~CDecorator_Scale()
{
}

//****************************************************************************************************
//закрытые функции
//****************************************************************************************************

//****************************************************************************************************
//открытые функции
//****************************************************************************************************

//----------------------------------------------------------------------------------------------------
//получить RGBA изображение
//----------------------------------------------------------------------------------------------------
void CDecorator_Scale::GetRGBAImage(uint32_t &width,uint32_t &height,std::vector<uint32_t> &vector_image)
{
 //создаём увеличенное изображение
 std::vector<uint32_t> vector_oldimage;//данные изображения
 //запрашиваем изображение
 CDecorator_IImage::GetRGBAImage(width,height,vector_oldimage);
 //производим масштабирование
 uint32_t x;
 uint32_t y;
 vector_image.resize(Width*Height);

 uint32_t *i_ptr=&(vector_image[0]);
 uint32_t *oldi_ptr=&(vector_oldimage[0]);
 for(y=0;y<Height;y++)
 {
  float tmp=static_cast<float>(y)/static_cast<float>(Height-1)*static_cast<float>(height-1);
  int32_t ys=static_cast<int32_t>(floor(tmp));
  if (ys<0) ys=0;
  if (ys>=height-1) ys=height-2;
  float u=tmp-ys;
  for(x=0;x<Width;x++,i_ptr++)
  {
   float tmp=static_cast<float>(x)/static_cast<float>(Width-1)*static_cast<float>(width-1);
   int32_t xs=static_cast<int32_t>(floor(tmp));
   if (xs<0) xs=0;
   if (xs>=width-1) xs=width-2;
   float v=tmp-xs;
   //коэффициенты
   float d1=(1-v)*(1-u);
   float d2=v*(1-u);
   float d3=v*u;
   float d4=(1-v)*u;
   //окрестные пиксели
   uint32_t p1=oldi_ptr[xs+ys*width];
   uint32_t p2=oldi_ptr[xs+1+ys*width];
   uint32_t p3=oldi_ptr[xs+1+(ys+1)*width];
   uint32_t p4=oldi_ptr[xs+(ys+1)*width];
   //вычисляем новое значение пикселя
   uint32_t color=0;
   uint32_t mask=0xFF;
   uint32_t offset=0;
   for(uint8_t k=0;k<4;k++,mask<<=8,offset+=8)
   {
    uint32_t kp1=(p1&mask)>>offset;
    uint32_t kp2=(p2&mask)>>offset;
    uint32_t kp3=(p3&mask)>>offset;
    uint32_t kp4=(p4&mask)>>offset;
    uint32_t c=static_cast<short>(kp1*d1+kp2*d2+kp3*d3+kp4*d4);
    if (c>=0xFF) c=0xFF;
    color|=(c<<offset);
   }
   *i_ptr=color;
  }
 }
 width=Width;
 height=Height;
}
//----------------------------------------------------------------------------------------------------
//задать RGBA изображение
//----------------------------------------------------------------------------------------------------
void CDecorator_Scale::SetRGBAImage(const uint32_t &width,const uint32_t &height,const std::vector<uint32_t> &vector_image)
{
 CDecorator_IImage::SetRGBAImage(width,height,vector_image);
}
//----------------------------------------------------------------------------------------------------
//задать размер изображения
//----------------------------------------------------------------------------------------------------
void CDecorator_Scale::SetSize(uint32_t width,uint32_t height)
{
 Width=width;
 Height=height;
 //CDecorator_IImage::SetSize(width,height);
}
//----------------------------------------------------------------------------------------------------
//задать точку
//----------------------------------------------------------------------------------------------------
void CDecorator_Scale::SetRGBAPixel(uint32_t x,uint32_t y,uint32_t color)
{
 CDecorator_IImage::SetRGBAPixel(x,y,color);
}
//----------------------------------------------------------------------------------------------------
//получить точку
//----------------------------------------------------------------------------------------------------
uint32_t CDecorator_Scale::GetRGBAPixel(uint32_t x,uint32_t y)
{
 return(CDecorator_IImage::GetRGBAPixel(x,y));
}
