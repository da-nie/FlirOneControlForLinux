//****************************************************************************************************
//подключаемые библиотеки
//****************************************************************************************************
#include "cpicture.h"

//****************************************************************************************************
//глобальные переменные
//****************************************************************************************************

//****************************************************************************************************
//константы
//****************************************************************************************************

//****************************************************************************************************
//макроопределения
//****************************************************************************************************

//****************************************************************************************************
//конструктор и деструктор
//****************************************************************************************************

//----------------------------------------------------------------------------------------------------
//конструктор
//----------------------------------------------------------------------------------------------------
CPicture::CPicture(void)
{ 
 Width=0;
 Height=0;
}
//----------------------------------------------------------------------------------------------------
//деструктор
//----------------------------------------------------------------------------------------------------
CPicture::~CPicture()
{
}

//****************************************************************************************************
//закрытые функции
//****************************************************************************************************

//****************************************************************************************************
//открытые функции
//****************************************************************************************************

//----------------------------------------------------------------------------------------------------
//получить изображение в формате RGBA
//----------------------------------------------------------------------------------------------------
void CPicture::GetRGBAImage(uint32_t &width,uint32_t &height,std::vector<uint32_t> &vector_image)
{
 width=Width;
 height=Height;
 vector_image=vector_Image;
}
//----------------------------------------------------------------------------------------------------
//задать изображение в формате RGBA
//----------------------------------------------------------------------------------------------------
void CPicture::SetRGBAImage(const uint32_t &width,const uint32_t &height,const std::vector<uint32_t> &vector_image)
{
 Width=width;
 Height=height;
 vector_Image=vector_image;
}
//----------------------------------------------------------------------------------------------------
//задать размер изображения и выделить память
//----------------------------------------------------------------------------------------------------
void CPicture::SetSize(uint32_t width,uint32_t height)
{
 Width=width;
 Height=height;
 vector_Image.resize(Width*Height);
}
//----------------------------------------------------------------------------------------------------
//задать точку
//----------------------------------------------------------------------------------------------------
void CPicture::SetRGBAPixel(uint32_t x,uint32_t y,uint32_t color)
{
 if (x>=Width) return;
 if (y>=Height) return;
 vector_Image[x+y*Width]=color;
}
//----------------------------------------------------------------------------------------------------
//получить точку
//----------------------------------------------------------------------------------------------------
uint32_t CPicture::GetRGBAPixel(uint32_t x,uint32_t y)
{
 if (x>=Width) return(0);
 if (y>=Height) return(0);
 return(vector_Image[x+y*Width]);
}
