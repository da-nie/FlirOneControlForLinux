#ifndef C_FLIR_ONE_CONTROL_H
#define C_FLIR_ONE_CONTROL_H

//****************************************************************************************************
//Класс управления Flir One
//****************************************************************************************************

//****************************************************************************************************
//подключаемые библиотеки
//****************************************************************************************************

#include <stdint.h>
#include <memory>
#include <string>
#include "tga.h"
#include "cthread.h"
#include "cmutex.h"
#include "cflironereceiver.h"
#include "cflironedriver.h"

//****************************************************************************************************
//макроопределения
//****************************************************************************************************

//бесконечное малое
#define EPS 0.00000001

//****************************************************************************************************
//константы
//****************************************************************************************************

//****************************************************************************************************
//предварительные объявления
//****************************************************************************************************

//****************************************************************************************************
//Класс управления Flir One
//****************************************************************************************************
class CFlirOneControl
{
 friend void* ThreadFunction(void *ptr);//поток обработки
 public:
  //-перечисления---------------------------------------------------------------------------------------
  //-структуры------------------------------------------------------------------------------------------
  //-константы------------------------------------------------------------------------------------------
  static const size_t RECEIVE_BUFFER_SIZE=1048576;//размер буфера приёма данных
 private:
  //-переменные-----------------------------------------------------------------------------------------
  struct SProtected
  {
   CMutex cMutex;//мютекс для доступа к данным
   bool ExitThread;//необходимость завершения потока
   CFlirOneReceiver cFlirOneReceiver;//класс приёма данных от Flir One
  } sProtected;//защищённые переменные
  CFlirOneDriver cFlirOneDriver;//класс драйверов для Flir One
  CThread cThread_Processing;//поток обработки
  int32_t Delay;//пауза для работы потока
  std::unique_ptr<uint8_t> ReceiveBuffer_Ptr;//указатель на буфер приёма данных
 public:
  //-конструктор----------------------------------------------------------------------------------------
  CFlirOneControl(void);
  //-деструктор-----------------------------------------------------------------------------------------
  ~CFlirOneControl();
 public:
  //-открытые функции-----------------------------------------------------------------------------------
  bool Open(void);//подключиться к устройству
  void Close(void);//отключиться от устройства
  bool LoadColorMap(const std::string &filename);//загрузить карту перекодировки изображения
  bool CopyColorImage(uint32_t *image_ptr,uint32_t size,uint32_t &index);//скопировать раскрашенное изображение в буфер
  bool CopyThermalImage(uint16_t *image_ptr,uint32_t size,uint32_t &index);//скопировать тепловое изображение в буфер
  bool CopyVideoImage(uint32_t *image_ptr,uint32_t size,uint32_t &index);//скопировать изображение с видеокамеры в буфер
  bool CopyColorMap(uint8_t R[256],uint8_t G[256],uint8_t B[256],uint32_t size);//скопировать палитру
  void SetShowVideo(bool state);//показывать ли видео
 private:
  //-закрытые функции-----------------------------------------------------------------------------------  
  bool Processing(void);//обработка (вызывается только потоком)
  void StartThread(void);//запустить поток
  void StopThread(void);//остановить поток
};

#endif
